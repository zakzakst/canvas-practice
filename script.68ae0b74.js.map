{"version":3,"sources":["script.js"],"names":["containerEls","document","querySelectorAll","titleTextEls","contentEls","forEach","el","IntersectionObserver","entries","entry","isIntersecting","target","classList","add","root","rootMargin","threshold","observe","observer","initObserver","window","innerHeight","clientHeight","boundingClientRect","top","remove","addEventListener","disconnect"],"mappings":";AAAA,IAAMA,EAAeC,SAASC,iBAAiB,cACzCC,EAAeF,SAASC,iBAAiB,gBACzCE,EAAaH,SAASC,iBAAiB,YAG7CC,EAAaE,QAAQ,SAACC,GAaH,IAAIC,qBAPJ,SAACC,GAChBA,EAAQH,QAAQ,SAACI,GACXA,EAAMC,gBACRD,EAAME,OAAOC,UAAUC,IAAI,iBARjB,CACdC,KAAM,KACNC,WAAY,WACZC,UAAW,IAUJC,QAAQX,KAInBN,EAAaK,QAAQ,SAACC,GACpB,IAAIY,EAEEC,EAAe,WACnB,IAAMH,EAAYI,OAAOC,YAAcf,EAAGgB,cA4B1CJ,EAAW,IAAIX,qBAtBE,SAACC,GAChBA,EAAQH,QAAQ,SAACI,GACXA,EAAMC,gBACRD,EAAME,OAAOC,UAAUC,IAAI,cACvBJ,EAAMc,mBAAmBC,IAAMJ,OAAOC,aAExCZ,EAAME,OAAOC,UAAUa,OAAO,YAI9BhB,EAAMc,mBAAmBC,IACzBJ,OAAOC,YAAcf,EAAGgB,aAGxBb,EAAME,OAAOC,UAAUC,IAAI,WAG3BJ,EAAME,OAAOC,UAAUa,OAAO,iBAtBtB,CACdX,KAAM,KACNC,WAAY,MACZC,UAAAA,KAyBOC,QAAQX,IAGnBa,IAEAC,OAAOM,iBAAiB,SAAU,WAChCR,EAASS,aACTR,QAKJf,EAAWC,QAAQ,SAACC,GAaD,IAAIC,qBAPJ,SAACC,GAChBA,EAAQH,QAAQ,SAACI,GACXA,EAAMC,gBACRD,EAAME,OAAOC,UAAUC,IAAI,iBARjB,CACdC,KAAM,KACNC,WAAY,WACZC,UAAW,IAUJC,QAAQX","file":"script.68ae0b74.js","sourceRoot":"..\\src\\clip_path","sourcesContent":["const containerEls = document.querySelectorAll(\".container\");\r\nconst titleTextEls = document.querySelectorAll(\".title__text\");\r\nconst contentEls = document.querySelectorAll(\".content\");\r\n\r\n// タイトルテキストアニメーション\r\ntitleTextEls.forEach((el) => {\r\n  const options = {\r\n    root: null,\r\n    rootMargin: \"-30% 0px\",\r\n    threshold: 0,\r\n  };\r\n  const callback = (entries) => {\r\n    entries.forEach((entry) => {\r\n      if (entry.isIntersecting) {\r\n        entry.target.classList.add(\"--animated\");\r\n      }\r\n    });\r\n  };\r\n  const observer = new IntersectionObserver(callback, options);\r\n  observer.observe(el);\r\n});\r\n\r\n// セクション背景アニメーション\r\ncontainerEls.forEach((el) => {\r\n  let observer;\r\n\r\n  const initObserver = () => {\r\n    const threshold = window.innerHeight / el.clientHeight;\r\n    const options = {\r\n      root: null,\r\n      rootMargin: \"0px\",\r\n      threshold,\r\n    };\r\n    const callback = (entries) => {\r\n      entries.forEach((entry) => {\r\n        if (entry.isIntersecting) {\r\n          entry.target.classList.add(\"--animated\");\r\n          if (entry.boundingClientRect.top < window.innerHeight) {\r\n            // 戻り方向に入った場合、endedクラス削除\r\n            entry.target.classList.remove(\"--ended\");\r\n          }\r\n        } else {\r\n          if (\r\n            entry.boundingClientRect.top <\r\n            window.innerHeight - el.clientHeight\r\n          ) {\r\n            // 進み方向に出た場合、endedクラス付与\r\n            entry.target.classList.add(\"--ended\");\r\n          } else {\r\n            // 戻り方向に出た場合、animatedクラス削除\r\n            entry.target.classList.remove(\"--animated\");\r\n          }\r\n        }\r\n      });\r\n    };\r\n    observer = new IntersectionObserver(callback, options);\r\n    observer.observe(el);\r\n  };\r\n\r\n  initObserver();\r\n\r\n  window.addEventListener(\"resize\", () => {\r\n    observer.disconnect();\r\n    initObserver();\r\n  });\r\n});\r\n\r\n// コンテンツ背景アニメーション\r\ncontentEls.forEach((el) => {\r\n  const options = {\r\n    root: null,\r\n    rootMargin: \"-50% 0px\",\r\n    threshold: 0,\r\n  };\r\n  const callback = (entries) => {\r\n    entries.forEach((entry) => {\r\n      if (entry.isIntersecting) {\r\n        entry.target.classList.add(\"--animated\");\r\n      }\r\n    });\r\n  };\r\n  const observer = new IntersectionObserver(callback, options);\r\n  observer.observe(el);\r\n});\r\n"]}